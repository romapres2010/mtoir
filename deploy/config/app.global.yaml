memory_limit: 2000000000         # рекомендуемый предел памяти в байтах - использовать для запуска в контейнере
shutdown_timeout: 30s            # максимальное время остановки daemon

# конфигурация сервиса логирования
logger:
    enable: true                        # состояние логирования 'true', 'false'
    global_level: INFO                  # debug, info, warn, error, dpanic, panic, fatal - все логгеры ниже этого уровня будут отключены
    global_filename: /app/log/app.log   # глобальное имя файл для логирования
    zap:
        enable: true                # состояние логирования 'true', 'false'
        disable_caller: false       # запретить вывод в лог информации о caller
        disable_stacktrace: false   # запретить вывод stacktrace
        development: false          # режим разработки для уровня dpanic
        stacktrace_level: error     # для какого уровня выводить stacktrace debug, info, warn, error, dpanic, panic, fatal
        core:
            -   enable: true        # состояние логирования 'true', 'false'
                min_level: null     # минимальный уровень логирования debug, info, warn, error, dpanic, panic, fatal
                max_level: INFO     # максимальный уровень логирования debug, info, warn, error, dpanic, panic, fatal
                log_to: lumberjack  # логировать в 'file', 'stderr', 'stdout', 'url', 'lumberjack'
                encoding: "console" # формат вывода 'console', 'json'
                file:
                    filename: ".debug.log"       # имя файл для логирования, если не заполнено, то используется глобальное имя
                    max_size: 10                 # максимальный размер лог файла в MB
                    max_age: 7                   # время хранения истории лог файлов в днях
                    max_backups: 10              # максимальное количество архивных логов
                    local_time: true             # использовать локальное время в имени архивных лог файлов
                    compress: false              # сжимать архивные лог файлы в zip архив
                encoder_config: &encoderconfig
                    message_key: "msg"
                    level_key: "level"
                    time_key: "ts"
                    name_key: "log"
                    caller_key: "caller"
                    function_key: ""
                    stacktrace_key: "stacktrace"
                    skip_line_ending: false
                    line_ending: "\n"
                    encode_level: "lower"               # capital, capitalColor, color, lower
                    encode_time: "iso8601"              # rfc3339nano, rfc3339, iso8601, millis, nanos
                    encode_time_custom: "2006-01-02 15:04:05.000000"  # приоритет над encode_time
                    encode_duration: "ms"               # string, nanos, ms
                    encode_caller: "short"              # full, short
                    console_separator: "    "
            -   enable: true        # состояние логирования 'true', 'false'
                min_level: ERROR    # минимальный уровень логирования debug, info, warn, error, dpanic, panic, fatal
                max_level: null     # максимальный уровень логирования debug, info, warn, error, dpanic, panic, fatal
                log_to: lumberjack  # логировать в 'file', 'stderr', 'stdout', 'url', 'lumberjack
                encoding: "console" # формат вывода 'console', 'json'
                file:
                    filename: ".error.log"       # имя файл для логирования, если не заполнено, то используется глобальное имя
                    max_size: 10                 # максимальный размер лог файла в MB
                    max_age: 7                   # время хранения истории лог файлов в днях
                    max_backups: 10              # максимальное количество архивных логов
                    local_time: true             # использовать локальное время в имени архивных лог файлов
                    compress: false              # сжимать архивные лог файлы в zip архив
                encoder_config: *encoderconfig
            -   enable: true        # состояние логирования 'true', 'false'
                min_level: null     # минимальный уровень логирования debug, info, warn, error, dpanic, panic, fatal
                max_level: null     # максимальный уровень логирования debug, info, warn, error, dpanic, panic, fatal
                log_to: stdout      # логировать в 'file', 'stderr', 'stdout', 'url', 'lumberjack
                encoding: "console" # формат вывода 'console', 'json'
                encoder_config: *encoderconfig
            -   enable: false       # состояние логирования 'true', 'false'
                min_level: ERROR    # минимальный уровень логирования debug, info, warn, error, dpanic, panic, fatal
                max_level: null     # максимальный уровень логирования debug, info, warn, error, dpanic, panic, fatal
                log_to: stderr      # логировать в 'file', 'stderr', 'stdout', 'url', 'lumberjack
                encoding: "console" # формат вывода 'console', 'json'
                encoder_config: *encoderconfig

# конфигурация HTTP сервера
http_server:
    listen_spec: 0.0.0.0:8080   #  HTTP listener address string
    read_timeout: 3600s          #  HTTP read timeout duration in sec - default 60 sec
    write_timeout: 3600s         #  HTTP write timeout duration in sec - default 60 sec
    idle_timeout: 3600s          #  HTTP idle timeout duration in sec - default 60 sec
    shutdown_timeout: 30s       #  service shutdown timeout in sec - default 30 sec
    max_header_bytes: 262144    #  HTTP max header bytes - default 1 MB
    use_go_profile: false       #  use Go profiling
    use_tls: false              #  use Transport Level Security
    tls_cert_file: ""           #  TLS Certificate file name
    tls_key_file: ""            #  TLS Private key file name
    tls_min_version: 0          #  TLS min version VersionTLS13, VersionTLS12, VersionTLS11, VersionTLS10, VersionSSL30
    tls_max_version: 0          #  TLS max version VersionTLS13, VersionTLS12, VersionTLS11, VersionTLS10, VersionSSL30

# конфигурация обработчиков HTTP запросов
http_service:
    auth_type: NONE                 # Authentication type NONE, INTERNAL, MSAD
    max_body_bytes: 0               # HTTP max body bytes - default 0 - unlimited
    use_hsts: false                 # use HTTP Strict Transport Security
    use_jwt: false                  # use JSON web token (JWT)
    jwt_expires_at: 0               # JWT expiry time in seconds - 0 without restriction
    msad_server: ""                 # MS Active Directory server
    msad_port: 0                    # MS Active Directory Port
    msad_base_dn: ""                # MS Active Directory BaseDN
    msad_security: 0                # MS Active Directory Security: SecurityNone, SecurityTLS, SecurityStartTLS
    use_buf_pool: false             # use byte polling for JSON -> HTTP
    buf_pooled_size: 65536          # recommended size of polling for JSON -> HTTP
    buf_pooled_max_size: 131072     # max size of polling for JSON -> HTTP
    log_error_to_http_header: true  # log any error to HTTP response header
    log_error_to_http_body: true    # log any error to HTTP response body
    http_header_max_size: 512       # max size HTTP header element - use for out response
    handlers:
        HealthHandler:               # Сервис health - проверка активности HEALTH
            enabled: true                               # Признак включен ли сервис
            application: "app"                          # Приложение к которому относится сервис
            module: "system"                            # Модуль к которому относится сервис
            service: "health"                           # Имя сервиса
            version: "v1.0.0"                           # Версия сервиса
            full_path: "/app/system/health"             # URI сервиса /Application.Module.Service.APIVersion или /Application/APIVersion/Module/Service
            params: ""                                  # Параметры сервиса с виде {id:[0-9]+}
            method: "GET"                               # HTTP метод: GET, POST, ...
            handler_name: "HealthHandler"               # Имя функции обработчика
        ReadyHandler:               # Сервис ready - handle to test readinessProbe
            enabled: true                               # Признак включен ли сервис
            application: "app"                          # Приложение к которому относится сервис
            module: "system"                            # Модуль к которому относится сервис
            service: "ready"                            # Имя сервиса
            version: "v1.0.0"                           # Версия сервиса
            full_path: "/app/system/ready"              # URI сервиса /Application.Module.Service.APIVersion или /Application/APIVersion/Module/Service
            params: ""                                  # Параметры сервиса с виде {id:[0-9]+}
            method: "GET"                               # HTTP метод: GET, POST, ...
            handler_name: "ReadyHandler"                # Имя функции обработчика
        WpHandlerFactorial:               # Сервис wptest - handle worker pool testing
            enabled: true                               # Признак включен ли сервис
            application: "app"                          # Приложение к которому относится сервис
            module: "system"                            # Модуль к которому относится сервис
            service: "ready"                            # Имя сервиса
            version: "v1.0.0"                           # Версия сервиса
            full_path: "/app/system/wp_factorial"       # URI сервиса /Application.Module.Service.APIVersion или /Application/APIVersion/Module/Service
            params: ""                                  # Параметры сервиса с виде {id:[0-9]+}
            method: "POST"                              # HTTP метод: GET, POST, ...
            handler_name: "WpHandlerFactorial"          # Имя функции обработчика
        ApiConvertHandler:               # Сервис отвечает за конвертацию между сущностями
            enabled: true                               # Признак включен ли сервис
            application: "app"                          # Приложение к которому относится сервис
            module: "system"                            # Модуль к которому относится сервис
            service: "entity_convert"                   # Имя сервиса
            version: "v1.0.0"                           # Версия сервиса
            full_path: "/app/system/entities/convert"  # URI сервиса /Application.Module.Service.APIVersion или /Application/APIVersion/Module/Service
            params: "{entity}/{format}"                 # Параметры сервиса с виде {id:[0-9]+}
            method: "POST"                              # HTTP метод: GET, POST, ...
            handler_name: "ApiConvertHandler"           # Имя функции обработчика
        ApiSelectHandler:               # Сервис отвечает за извлечение из БД - несколько строк
            enabled: true                               # Признак включен ли сервис
            application: "app"                          # Приложение к которому относится сервис
            module: "system"                            # Модуль к которому относится сервис
            service: "entity_select"                    # Имя сервиса
            version: "v1.0.0"                           # Версия сервиса
            full_path: "/app/system/entities"           # URI сервиса /Application.Module.Service.APIVersion или /Application/APIVersion/Module/Service
            params: "{entity}/{format}" # Параметры сервиса с виде {id:[0-9]+}
            method: "GET"                               # HTTP метод: GET, POST, ...
            handler_name: "ApiSelectHandler"  # Имя функции обработчика
        ApiXlsHandler:                                  # Сервис отвечает за извлечение из БД в xls
            enabled: true                               # Признак включен ли сервис
            application: "app"                          # Приложение к которому относится сервис
            module: "system"                            # Модуль к которому относится сервис
            service: "entity_select_xls"                # Имя сервиса
            version: "v1.0.0"                           # Версия сервиса
            full_path: "/app/system/xls"                # URI сервиса /Application.Module.Service.APIVersion или /Application/APIVersion/Module/Service
            params: "{entity}"                          # Параметры сервиса с виде {id:[0-9]+}
            method: "POST"                              # HTTP метод: GET, POST, ...
            handler_name: "ApiXlsHandler"               # Имя функции обработчика
        ApiGetHandler:               # Сервис отвечает за извлечение из БД - одна строка
            enabled: true                               # Признак включен ли сервис
            application: "app"                          # Приложение к которому относится сервис
            module: "system"                            # Модуль к которому относится сервис
            service: "entity_get"                       # Имя сервиса
            version: "v1.0.0"                           # Версия сервиса
            full_path: "/app/system/entities"           # URI сервиса /Application.Module.Service.APIVersion или /Application/APIVersion/Module/Service
            #            params: "{entity}/{id:[0-9]+}/{format}" # Параметры сервиса с виде {id:[0-9]+}
            params: "{entity}/{id}/{format}"            # Параметры сервиса с виде {id:[0-9]+}
            method: "GET"                               # HTTP метод: GET, POST, ...
            handler_name: "ApiGetHandler"               # Имя функции обработчика
        ApiCreateHandler:               # Сервис отвечает за создание строки в БД
            enabled: true                               # Признак включен ли сервис
            application: "app"                          # Приложение к которому относится сервис
            module: "system"                            # Модуль к которому относится сервис
            service: "entity_create"                    # Имя сервиса
            version: "v1.0.0"                           # Версия сервиса
            full_path: "/app/system/entities"           # URI сервиса /Application.Module.Service.APIVersion или /Application/APIVersion/Module/Service
            params: "{entity}/{format}"                 # Параметры сервиса с виде {id:[0-9]+}
            method: "POST"                              # HTTP метод: GET, POST, ...
            handler_name: "ApiCreateHandler"            # Имя функции обработчика
        ApiUpdateHandler:               # Сервис отвечает за создание строки в БД
            enabled: true                               # Признак включен ли сервис
            application: "app"                          # Приложение к которому относится сервис
            module: "system"                            # Модуль к которому относится сервис
            service: "entity_update"                    # Имя сервиса
            version: "v1.0.0"                           # Версия сервиса
            full_path: "/app/system/entities"           # URI сервиса /Application.Module.Service.APIVersion или /Application/APIVersion/Module/Service
            params: "{entity}/{format}"                 # Параметры сервиса с виде {id:[0-9]+}
            method: "PUT"                               # HTTP метод: GET, POST, ...
            handler_name: "ApiUpdateHandler"            # Имя функции обработчика
        ApiGetEntityMetaHandler:               # Сервис отвечает за извлечение мата данные entity
            enabled: true                               # Признак включен ли сервис
            application: "app"                          # Приложение к которому относится сервис
            module: "system"                            # Модуль к которому относится сервис
            service: "entity_meta_get"                  # Имя сервиса
            version: "v1.0.0"                           # Версия сервиса
            full_path: "/app/system/entity_meta"        # URI сервиса /Application.Module.Service.APIVersion или /Application/APIVersion/Module/Service
            params: "{entity}/{format}"                 # Параметры сервиса с виде {id:[0-9]+}
            method: "GET"                               # HTTP метод: GET, POST, ...
            handler_name: "ApiGetEntityMetaHandler"     # Имя функции обработчика
        ApiCreateEntityMetaHandler:               # Сервис отвечает за создание метаданные entity
            enabled: true                               # Признак включен ли сервис
            application: "app"                          # Приложение к которому относится сервис
            module: "system"                            # Модуль к которому относится сервис
            service: "entity_meta_create"               # Имя сервиса
            version: "v1.0.0"                           # Версия сервиса
            full_path: "/app/system/entity_meta"        # URI сервиса /Application.Module.Service.APIVersion или /Application/APIVersion/Module/Service
            params: "{format}"                          # Параметры сервиса с виде {id:[0-9]+}
            method: "POST"                              # HTTP метод: GET, POST, ...
            handler_name: "ApiCreateEntityMetaHandler"  # Имя функции обработчика
        ApiUpdateEntityMetaHandler:               # Сервис отвечает за обновление метаданные entity
            enabled: true                               # Признак включен ли сервис
            application: "app"                          # Приложение к которому относится сервис
            module: "system"                            # Модуль к которому относится сервис
            service: "entity_meta_update"               # Имя сервиса
            version: "v1.0.0"                           # Версия сервиса
            full_path: "/app/system/entity_meta"        # URI сервиса /Application.Module.Service.APIVersion или /Application/APIVersion/Module/Service
            params: "{entity}/{format}"                 # Параметры сервиса с виде {id:[0-9]+}
            method: "PUT"                               # HTTP метод: GET, POST, ...
            handler_name: "ApiUpdateEntityMetaHandler"  # Имя функции обработчика

# конфигурация сервиса логирования HTTP трафика (опциональный сервис)
http_logger:
    enable: false                          # состояние логирования 'true', 'false'
    log_in_req: true                      # логировать входящие запросы
    log_out_req: true                     # логировать исходящие запросы
    log_in_resp: true                     # логировать входящие ответы
    log_out_resp: true                    # логировать исходящие ответы
    log_body: true                        # логировать тело запроса
    file:
        filename: /app/log/app_http.log   # имя файл для логирования, если не заполнено, то используется глобальное имя
        max_size: 10                        # максимальный размер лог файла в MB
        max_age: 7                          # время хранения истории лог файлов в днях
        max_backups: 10                     # максимальное количество архивных логов
        local_time: true                    # использовать локальное время в имени архивных лог файлов
        compress: false                     # сжимать архивные лог файлы в zip архив

# конфигурация сервиса БД для API
api_db_storage:
    storages:
        Utce:
            name: Utce                  # имя подключения
            host: srvk01.borlas.ru      # host БД
            port: "5432"                # порт листенера БД
            dbname: postgres 	        # имя БД
            ssl_mode: disable           # режим SSL
            user: msutoir               # пользователь для подключения к БД
            pass: msutoir               # пароль пользователя
            conn_max_lifetime: 1000ms   # время жизни подключения в миллисекундах
            max_open_conns: 16          # максимальное количество открытых подключений
            max_idle_conns: 8           # максимальное количество простаивающих подключений
            driver_name: pgx            # имя драйвера "postgres" | "pgx" | "godror" | "oracle"
#        ComposeOracle:
#            name: ComposeOracle         # имя подключения
##            host: app-oracle-host             # host БД
#            host: localhost             # host БД
#            port: "1521"                # порт листенера БД
#            dbname: FREE     	        # имя БД
#            ssl_mode: disable           # режим SSL
#            user: system                # пользователь для подключения к БД
#            pass: Oracle_123            # пароль пользователя
#            conn_max_lifetime: 1000ms   # время жизни подключения в миллисекундах
#            max_open_conns: 16          # максимальное количество открытых подключений
#            max_idle_conns: 8           # максимальное количество простаивающих подключений
#            driver_name: oracle         # имя драйвера "postgres" | "pgx" | "godror" | "oracle"
#        Msutoir:
#            name: Msutoir               # имя подключения
#            host: localhost             # host БД
#            port: "5432"                # порт листенера БД
#            dbname: msutoir 	        # имя БД
#            ssl_mode: disable           # режим SSL
#            user: postgres              # пользователь для подключения к БД
#            pass: postgres              # пароль пользователя
#            conn_max_lifetime: 1000ms   # время жизни подключения в миллисекундах
#            max_open_conns: 16          # максимальное количество открытых подключений
#            max_idle_conns: 8           # максимальное количество простаивающих подключений
#            driver_name: pgx            # имя драйвера "postgres" | "pgx" | "godror" | "oracle"
        Msutoir:
            name: Msutoir               # имя подключения
            host: srvk01.borlas.ru      # host БД
            port: "5432"                # порт листенера БД
            dbname: msutoir 	        # имя БД
            ssl_mode: disable           # режим SSL
            user: msutoir               # пользователь для подключения к БД
            pass: msutoir               # пароль пользователя
            conn_max_lifetime: 1000ms   # время жизни подключения в миллисекундах
            max_open_conns: 16          # максимальное количество открытых подключений
            max_idle_conns: 8           # максимальное количество простаивающих подключений
            driver_name: pgx            # имя драйвера "postgres" | "pgx" | "godror"

api_cache:
    num_counters: 10000000      # number of keys to track frequency of (10M)
    max_cost: 1000000000        # maximum cost of cache (1GB)
    buffer_items: 64            # number of keys per Get buffer
    metrics: false              # whether cache statistics are kept
    ignore_internal_cost: false # cost of internally storing the value should be ignored

api_service:
    entity_config_file: /app/defcfg/entities/global_entities.yaml  # глобальное имя файл с описанием meta, каждая сущность россыпью в каталоге
    populate_cache_on_start: false                   # наполнить cache при старте из БД
    query_option:
        delimiter_start: "["                      # [ разделить начала для определения спец параметров
        delimiter_end: "]"                        # ] разделить конца для определения спец параметров
        tx: "tx"                                  # [tx] идентификатор внешней транзакции
        fields: "fields"                          # [fields] фильтрация список полей в ответе
        from_entity: "from_entity"                # [from_entity] имя входной сущности
        skip_cache: "skip_cache"                  # [skip_cache] принудительно считать из внешнего источника
        skip_calculation: "skip_calculation"      # [skip_calculation] принудительно отключить все вычисления
        use_cache: "use_cache"                    # [use_cache] принудительно использовать кеширование - имеет приоритет над skip_cache
        embed_error: "embed_error"                # [embed_error] встраивать отдельные типы некритичных ошибок в текст ответа
        cascade_up: "cascade_up"                  # [cascade_up] сколько уровней вверх по FK
        cascade_down: "cascade_down"              # [cascade_down] сколько уровней вниз по FK
        name_format: "name_format"                # [name_format] формат именования полей в параметрах запроса 'json', 'yaml', 'xml', 'xsl', 'name'
        out_format: "out_format"                  # [out_format] формат вывода результата 'json', 'yaml', 'xml', 'xsl'
        ignore_extra_field: "ignore_extra_field"  # [ignore_extra_field] идентификатор внешней транзакции
        validate: "validate"                      # [validate] проверка данных
        multi_row: "multi_row"                    # [multi_row] признак многострочной обработки
        filter: "filter"                          # [filter] признак фильтрации
        static_filtering: "static_filtering"      # [static_filtering] признак статической фильтрации
        persist: "persist"                        # [persist] признак, что отправлять данные в хранилище
        db_order: "db_order"                      # [db_order] последовательность сортировки строк в ответе
        db_where: "db_where"                      # [db_where] фраза where для встраивания в запрос
        db_limit: "db_limit"                      # [db_limit] ограничение на выборку данных в запросе
        persist_restrict_fields: "persist_restrict_fields"     # [persist_restrict_fields] ограничить поля сохранения, теми, что пришли на вход в Marshal
        persist_use_uk: "persist_use_uk"                       # [persist_use_uk] для сохранения использовать UK, если не заполнен PK
        persist_update_all_fields: "persist_update_all_fields" # [persist_update_all_fields] обновлять все поля объекта
    entity_config:
        db:
            name: meta                  # имя подключения
            host: srvk01.borlas.ru      # host БД
            port: "5432"                # порт листенера БД
            dbname: meta     	        # имя БД
            ssl_mode: disable           # режим SSL
            user: meta                  # пользователь для подключения к БД
            pass: meta                  # пароль пользователя
            conn_max_lifetime: 1000ms   # время жизни подключения в миллисекундах
            max_open_conns: 16          # максимальное количество открытых подключений
            max_idle_conns: 8           # максимальное количество простаивающих подключений
            driver_name: pgx            # имя драйвера "postgres" | "pgx" | "godror"


# конфигурация сервиса обработчиков
worker_pool_service:
    total_timeout: 100ms                    # максимальное время обработки всех task в одной группе
    shutdown_timeout: 30s                   # максимальное время остановки pool
    worker_pool:			                # конфигурация пула обработчиков
        task_queue_size: 0			        # размер очереди - если 0, то количество ядер х 10000
        task_timeout: 20ms                  # максимальное время обработки одного task
        worker_concurrency: 8               # уровень параллелизма для запускай нескольких расчетов - если 0, то количество ядер х2
        worker_timeout: 30ms                # максимальное время обработки для одного обработчика

# конфигурация сбора метрик
metrics:
    metrics_namespace: com
    metrics_subsystem: meta_app
    collect_meta_count_vec: true
    collect_meta_duration_vec: true
    collect_meta_duration: true
    collect_db_count_vec: true
    collect_db_duration_vec: true
    collect_db_duration: true
    collect_http_requests_count_vec: true
    collect_http_error_requests_count_vec: true
    collect_http_requests_duration_vec: true
    collect_http_active_requests_count: true
    collect_http_requests_duration: true
    collect_http_client_call_count_vec: true
    collect_http_client_call_duration_vec: true
    collect_marshaling_duration_vec: true
    collect_un_marshaling_duration_vec: true
    collect_wp_task_queue_buffer_len_vec: true
    collect_wp_add_task_wait_count_vec: true
    collect_wp_worker_process_count_vec: true
    collect_wp_task_process_duration_ms_by_name: true